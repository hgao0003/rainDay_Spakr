{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating Spark Session and Loading the Data\n",
    "#### studnet name : Han Gao\n",
    "#### student ID :28051955\n",
    "#### Step 1 :import spark session and initialize spark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import pakcage\n",
    "from pyspark.sql import SparkSession \n",
    "from pyspark import SparkContext, SparkConf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the sparksession \n",
    "\n",
    "spark=SparkSession\\\n",
    ".builder\\\n",
    ".master(\"local[4]\")\\\n",
    ".appName(\"Assignment two\")\\\n",
    ".config(\"spark.some.confug.option\",\"some-value\")\\\n",
    ".getOrCreate()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <div>\n",
       "                <p><b>SparkSession - in-memory</b></p>\n",
       "                \n",
       "        <div>\n",
       "            <p><b>SparkContext</b></p>\n",
       "\n",
       "            <p><a href=\"http://ip-10-27-163-14:4040\">Spark UI</a></p>\n",
       "\n",
       "            <dl>\n",
       "              <dt>Version</dt>\n",
       "                <dd><code>v2.4.3</code></dd>\n",
       "              <dt>Master</dt>\n",
       "                <dd><code>local[4]</code></dd>\n",
       "              <dt>AppName</dt>\n",
       "                <dd><code>Assignment two</code></dd>\n",
       "            </dl>\n",
       "        </div>\n",
       "        \n",
       "            </div>\n",
       "        "
      ],
      "text/plain": [
       "<pyspark.sql.session.SparkSession at 0x7f56ad287ba8>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spark"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### step 2: load the dataset and print the schema and total number of entries\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "rain_dataset_string=spark.read.csv(\"weatherAUS.csv\",header =True,inferSchema =True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Date: timestamp (nullable = true)\n",
      " |-- Location: string (nullable = true)\n",
      " |-- MinTemp: string (nullable = true)\n",
      " |-- MaxTemp: string (nullable = true)\n",
      " |-- Rainfall: string (nullable = true)\n",
      " |-- Evaporation: string (nullable = true)\n",
      " |-- Sunshine: string (nullable = true)\n",
      " |-- WindGustDir: string (nullable = true)\n",
      " |-- WindGustSpeed: string (nullable = true)\n",
      " |-- WindDir9am: string (nullable = true)\n",
      " |-- WindDir3pm: string (nullable = true)\n",
      " |-- WindSpeed9am: string (nullable = true)\n",
      " |-- WindSpeed3pm: string (nullable = true)\n",
      " |-- Humidity9am: string (nullable = true)\n",
      " |-- Humidity3pm: string (nullable = true)\n",
      " |-- Pressure9am: string (nullable = true)\n",
      " |-- Pressure3pm: string (nullable = true)\n",
      " |-- Cloud9am: string (nullable = true)\n",
      " |-- Cloud3pm: string (nullable = true)\n",
      " |-- Temp9am: string (nullable = true)\n",
      " |-- Temp3pm: string (nullable = true)\n",
      " |-- RainToday: string (nullable = true)\n",
      " |-- RainTomorrow: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rain_dataset_string.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the total entries is 142193\n"
     ]
    }
   ],
   "source": [
    "# show the total number of entries in the dataset\n",
    "total_number=rain_dataset_string.count()\n",
    "print(\"the total entries is \"+str(total_number))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part B Data cleaning and processing "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### step 03: Delete columns from the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop columns\n",
    "dele_column=[\"Date\",\"Location\",\"Evaporation\",\"Sunshine\",\"Cloud9am\",\"Cloud3pm\",\"Temp9am\",\"Temp3pm\"]\n",
    "drop_finish=rain_dataset_string.drop(\"Date\",\"Location\",\"Evaporation\",\"Sunshine\",\"Cloud9am\",\"Cloud3pm\",\"Temp9am\",\"Temp3pm\")\n",
    "#dropName is the columns name of dropped dataset\n",
    "dropNmae=drop_finish.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The reason why i need to delete a lots of columns because these columns have a great amount missing value, these missing value would cause that the accuracy is low. the model cannot make a good prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- MinTemp: string (nullable = true)\n",
      " |-- MaxTemp: string (nullable = true)\n",
      " |-- Rainfall: string (nullable = true)\n",
      " |-- WindGustDir: string (nullable = true)\n",
      " |-- WindGustSpeed: string (nullable = true)\n",
      " |-- WindDir9am: string (nullable = true)\n",
      " |-- WindDir3pm: string (nullable = true)\n",
      " |-- WindSpeed9am: string (nullable = true)\n",
      " |-- WindSpeed3pm: string (nullable = true)\n",
      " |-- Humidity9am: string (nullable = true)\n",
      " |-- Humidity3pm: string (nullable = true)\n",
      " |-- Pressure9am: string (nullable = true)\n",
      " |-- Pressure3pm: string (nullable = true)\n",
      " |-- RainToday: string (nullable = true)\n",
      " |-- RainTomorrow: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# print the schema of dataset that is dropped the some columns\n",
    "drop_finish.printSchema()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### step 04: Print the number of missing data in each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MinTemp have 637 missing value \n",
      "MaxTemp have 322 missing value \n",
      "Rainfall have 1406 missing value \n",
      "WindGustDir have 9330 missing value \n",
      "WindGustSpeed have 9270 missing value \n",
      "WindDir9am have 10013 missing value \n",
      "WindDir3pm have 3778 missing value \n",
      "WindSpeed9am have 1348 missing value \n",
      "WindSpeed3pm have 2630 missing value \n",
      "Humidity9am have 1774 missing value \n",
      "Humidity3pm have 3610 missing value \n",
      "Pressure9am have 14014 missing value \n",
      "Pressure3pm have 13981 missing value \n",
      "RainToday have 1406 missing value \n",
      "RainTomorrow have 0 missing value \n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql.functions import *\n",
    "# this function for calculate the missing value\n",
    "def calculateMissingValue():\n",
    "    for i in dropNmae:\n",
    "        counts=rain_dataset_string.select(i).filter(rain_dataset_string[i]==\"NA\").count()\n",
    "        print(str(i)+\" have \"+str(counts)+\" missing value \")\n",
    "calculateMissingValue()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### step 05: fill the missing  data with average value and maximum occurence value "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# import all of necessary packages\n",
    "from pyspark.sql.functions import * \n",
    "from pyspark.sql.functions import UserDefinedFunction\n",
    "from pyspark.sql.types import *\n",
    "import re\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-RECORD 0---------------\n",
      " MinTemp       | 13.4   \n",
      " MaxTemp       | 22.9   \n",
      " Rainfall      | 0.6    \n",
      " WindGustSpeed | 44     \n",
      " WindSpeed9am  | 20     \n",
      " WindSpeed3pm  | 24     \n",
      " Humidity9am   | 71     \n",
      " Humidity3pm   | 22     \n",
      " Pressure9am   | 1007.7 \n",
      " Pressure3pm   | 1007.1 \n",
      " WindGustDir   | W      \n",
      " WindDir9am    | W      \n",
      " WindDir3pm    | WNW    \n",
      " RainToday     | No     \n",
      " RainTomorrow  | No     \n",
      "-RECORD 1---------------\n",
      " MinTemp       | 7.4    \n",
      " MaxTemp       | 25.1   \n",
      " Rainfall      | 0      \n",
      " WindGustSpeed | 44     \n",
      " WindSpeed9am  | 4      \n",
      " WindSpeed3pm  | 22     \n",
      " Humidity9am   | 44     \n",
      " Humidity3pm   | 25     \n",
      " Pressure9am   | 1010.6 \n",
      " Pressure3pm   | 1007.8 \n",
      " WindGustDir   | WNW    \n",
      " WindDir9am    | NNW    \n",
      " WindDir3pm    | WSW    \n",
      " RainToday     | No     \n",
      " RainTomorrow  | No     \n",
      "-RECORD 2---------------\n",
      " MinTemp       | 12.9   \n",
      " MaxTemp       | 25.7   \n",
      " Rainfall      | 0      \n",
      " WindGustSpeed | 46     \n",
      " WindSpeed9am  | 19     \n",
      " WindSpeed3pm  | 26     \n",
      " Humidity9am   | 38     \n",
      " Humidity3pm   | 30     \n",
      " Pressure9am   | 1007.6 \n",
      " Pressure3pm   | 1008.7 \n",
      " WindGustDir   | WSW    \n",
      " WindDir9am    | W      \n",
      " WindDir3pm    | WSW    \n",
      " RainToday     | No     \n",
      " RainTomorrow  | No     \n",
      "only showing top 3 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# identity the numeric columns and string columns\n",
    "\n",
    "stringColumns=[\"WindGustDir\",\"WindDir9am\",\"WindDir3pm\",\"RainToday\",\"RainTomorrow\"]\n",
    "numericaColumns=[i for i in dropNmae if i not in stringColumns]\n",
    "#fill the miss Value\n",
    "\n",
    "#create a list to gather fill NA columns\n",
    "ne_rain=rain_dataset_string.select(\"RainTomorrow\").collect()\n",
    "save=[[] for ii in np.arange(0,len(ne_rain),1)]\n",
    "#Numeric colums\n",
    "for i in numericaColumns:\n",
    "    #get the avage value \n",
    "    avg_value=rain_dataset_string.filter(col(i)!=\"NA\").select(avg(i)).collect()[0][0]   \n",
    "    #use the UDF and regural expression to replace the NA value \n",
    "    replaceNA=UserDefinedFunction(lambda x :re.sub(\"NA\",str(avg_value),x),StringType())\n",
    "    #fillNaColums is that the columns has fill the avg value \n",
    "    fillNaColums=rain_dataset_string.select(replaceNA(i)).collect()\n",
    "    #add the columns to the save list\n",
    "    [save[ii].append(fillNaColums[ii][0]) for ii in np.arange(0,len(fillNaColums),1)]\n",
    "#String columns\n",
    "for i in stringColumns:\n",
    "    # get the top one \n",
    "    topOne=rain_dataset_string.filter(col(i)!=\"NA\").groupby(i).count().sort(\"count\",ascending = False).first()[0][0]\n",
    "    #use the UDF and regural expression to replace the NA value \n",
    "    replaceNA=UserDefinedFunction(lambda x :re.sub(\"NA\",str(topOne),x),StringType())\n",
    "    #fillNaColums is that the columns has fill the top value \n",
    "    fillNaColums=rain_dataset_string.select(replaceNA(i)).collect()\n",
    "    #add the columns to the save list\n",
    "    [save[ii].append(fillNaColums[ii][0]) for ii in np.arange(0,len(fillNaColums),1)]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "newColumnName=numericaColumns+stringColumns\n",
    "\n",
    "new_df=spark.createDataFrame(save,schema=newColumnName)\n",
    "new_df.show(3,False,True)\n",
    "new_name=new_df.columns\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### step 06: Data transformation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- MinTemp: string (nullable = true)\n",
      " |-- MaxTemp: string (nullable = true)\n",
      " |-- Rainfall: string (nullable = true)\n",
      " |-- WindGustSpeed: string (nullable = true)\n",
      " |-- WindSpeed9am: string (nullable = true)\n",
      " |-- WindSpeed3pm: string (nullable = true)\n",
      " |-- Humidity9am: string (nullable = true)\n",
      " |-- Humidity3pm: string (nullable = true)\n",
      " |-- Pressure9am: string (nullable = true)\n",
      " |-- Pressure3pm: string (nullable = true)\n",
      " |-- WindGustDir: string (nullable = true)\n",
      " |-- WindDir9am: string (nullable = true)\n",
      " |-- WindDir3pm: string (nullable = true)\n",
      " |-- RainToday: string (nullable = true)\n",
      " |-- RainTomorrow: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "new_df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- MinTemp: double (nullable = true)\n",
      " |-- MaxTemp: double (nullable = true)\n",
      " |-- Rainfall: double (nullable = true)\n",
      " |-- WindGustSpeed: double (nullable = true)\n",
      " |-- WindSpeed9am: double (nullable = true)\n",
      " |-- WindSpeed3pm: double (nullable = true)\n",
      " |-- Humidity9am: double (nullable = true)\n",
      " |-- Humidity3pm: double (nullable = true)\n",
      " |-- Pressure9am: double (nullable = true)\n",
      " |-- Pressure3pm: double (nullable = true)\n",
      " |-- WindGustDir: string (nullable = true)\n",
      " |-- WindDir9am: string (nullable = true)\n",
      " |-- WindDir3pm: string (nullable = true)\n",
      " |-- RainToday: string (nullable = true)\n",
      " |-- RainTomorrow: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql.types import * \n",
    "# transfor the datype all numerical value columns transfer the datatype to double\n",
    "for i in numericaColumns:\n",
    "    new_df=new_df.withColumn(i,col(i).cast(DoubleType()))\n",
    "\n",
    "new_df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.feature import StringIndexer,VectorAssembler\n",
    "from pyspark.ml.classification import LogisticRegression,DecisionTreeClassifier,RandomForestClassifier,GBTClassifier\n",
    "from pyspark.ml.tuning import ParamGridBuilder,CrossValidator\n",
    "from pyspark.ml import Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove the RainTomorrow columns\n",
    "stringColumns=[\"WindGustDir\",\"WindDir9am\",\"WindDir3pm\",\"RainToday\",\"RainTomorrow\"]\n",
    "stringColumns.remove(\"RainTomorrow\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RainTomorrow is label columns,so I decide to keep this column,later i will directly convert it to label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- MinTemp: double (nullable = true)\n",
      " |-- MaxTemp: double (nullable = true)\n",
      " |-- Rainfall: double (nullable = true)\n",
      " |-- WindGustSpeed: double (nullable = true)\n",
      " |-- WindSpeed9am: double (nullable = true)\n",
      " |-- WindSpeed3pm: double (nullable = true)\n",
      " |-- Humidity9am: double (nullable = true)\n",
      " |-- Humidity3pm: double (nullable = true)\n",
      " |-- Pressure9am: double (nullable = true)\n",
      " |-- Pressure3pm: double (nullable = true)\n",
      " |-- WindGustDirfeature: double (nullable = false)\n",
      " |-- WindDir9amfeature: double (nullable = false)\n",
      " |-- WindDir3pmfeature: double (nullable = false)\n",
      " |-- RainTodayfeature: double (nullable = false)\n",
      " |-- label: double (nullable = false)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# convert String columns to number use the StringIndexer\n",
    "# newStringColumnName for save the feature columns name\n",
    "newStringColumnName=[]\n",
    "stage=[]\n",
    "for i in stringColumns:\n",
    "    stringIndexConvert=StringIndexer(inputCol=i,outputCol=i +\"feature\")\n",
    "    newStringColumnName.append(i+\"feature\")\n",
    "    stage.append(stringIndexConvert)\n",
    "# convert the RainTomorrow columns to label \n",
    "labelStringIndex=StringIndexer(inputCol=\"RainTomorrow\",outputCol=\"label\")\n",
    "stage.append(labelStringIndex)\n",
    "# apply the pipline for geting the features\n",
    "pipeline=Pipeline(stages=stage)\n",
    "pip_model=pipeline.fit(new_df)\n",
    "dfFeature=pip_model.transform(new_df)\n",
    "#drop the original string columns\n",
    "featureDataset=dfFeature.drop(*stringColumns,\"RainTomorrow\")\n",
    "# show the featureDataset schema for checking the dataset\n",
    "featureDataset.printSchema()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### step 07:Create the feature vector and divide the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-RECORD 0------------------------------------------------------------------------------------\n",
      " MinTemp            | 13.4                                                                   \n",
      " MaxTemp            | 22.9                                                                   \n",
      " Rainfall           | 0.6                                                                    \n",
      " WindGustSpeed      | 44.0                                                                   \n",
      " WindSpeed9am       | 20.0                                                                   \n",
      " WindSpeed3pm       | 24.0                                                                   \n",
      " Humidity9am        | 71.0                                                                   \n",
      " Humidity3pm        | 22.0                                                                   \n",
      " Pressure9am        | 1007.7                                                                 \n",
      " Pressure3pm        | 1007.1                                                                 \n",
      " WindGustDirfeature | 0.0                                                                    \n",
      " WindDir9amfeature  | 6.0                                                                    \n",
      " WindDir3pmfeature  | 7.0                                                                    \n",
      " RainTodayfeature   | 0.0                                                                    \n",
      " label              | 0.0                                                                    \n",
      " features           | [13.4,22.9,0.6,44.0,20.0,24.0,71.0,22.0,1007.7,1007.1,0.0,6.0,7.0,0.0] \n",
      "-RECORD 1------------------------------------------------------------------------------------\n",
      " MinTemp            | 7.4                                                                    \n",
      " MaxTemp            | 25.1                                                                   \n",
      " Rainfall           | 0.0                                                                    \n",
      " WindGustSpeed      | 44.0                                                                   \n",
      " WindSpeed9am       | 4.0                                                                    \n",
      " WindSpeed3pm       | 22.0                                                                   \n",
      " Humidity9am        | 44.0                                                                   \n",
      " Humidity3pm        | 25.0                                                                   \n",
      " Pressure9am        | 1010.6                                                                 \n",
      " Pressure3pm        | 1007.8                                                                 \n",
      " WindGustDirfeature | 9.0                                                                    \n",
      " WindDir9amfeature  | 9.0                                                                    \n",
      " WindDir3pmfeature  | 3.0                                                                    \n",
      " RainTodayfeature   | 0.0                                                                    \n",
      " label              | 0.0                                                                    \n",
      " features           | [7.4,25.1,0.0,44.0,4.0,22.0,44.0,25.0,1010.6,1007.8,9.0,9.0,3.0,0.0]   \n",
      "-RECORD 2------------------------------------------------------------------------------------\n",
      " MinTemp            | 12.9                                                                   \n",
      " MaxTemp            | 25.7                                                                   \n",
      " Rainfall           | 0.0                                                                    \n",
      " WindGustSpeed      | 46.0                                                                   \n",
      " WindSpeed9am       | 19.0                                                                   \n",
      " WindSpeed3pm       | 26.0                                                                   \n",
      " Humidity9am        | 38.0                                                                   \n",
      " Humidity3pm        | 30.0                                                                   \n",
      " Pressure9am        | 1007.6                                                                 \n",
      " Pressure3pm        | 1008.7                                                                 \n",
      " WindGustDirfeature | 6.0                                                                    \n",
      " WindDir9amfeature  | 6.0                                                                    \n",
      " WindDir3pmfeature  | 3.0                                                                    \n",
      " RainTodayfeature   | 0.0                                                                    \n",
      " label              | 0.0                                                                    \n",
      " features           | [12.9,25.7,0.0,46.0,19.0,26.0,38.0,30.0,1007.6,1008.7,6.0,6.0,3.0,0.0] \n",
      "only showing top 3 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#gather all of features togather \n",
    "# label 0 is no rain, label 1 is rain day\n",
    "assemblerInputs=numericaColumns+newStringColumnName\n",
    "assemberNumerical= VectorAssembler(inputCols=assemblerInputs,outputCol=\"features\")\n",
    "finaldataset=assemberNumerical.transform(featureDataset)\n",
    "finaldataset.show(3,False,True)\n",
    "train,test = finaldataset.randomSplit([0.7, 0.3], seed = 100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Apply Machine Learning Algorthms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 08: apply machine learning classification algorithms on the dataset and compare their accuracy \n",
    "#### Plot the accuracy as bar graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.classification import DecisionTreeClassifier,LogisticRegression\n",
    "from pyspark.ml.classification import GBTClassifier,RandomForestClassifier\n",
    "from pyspark.ml.evaluation import MulticlassClassificationEvaluator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier accuracy is 0.8350658840723193\n",
      "DecisionTreeClassifier Test Error = 0.164934 \n",
      "+----------------------------------------+\n",
      "|probability                             |\n",
      "+----------------------------------------+\n",
      "|[0.9200359013963973,0.07996409860360267]|\n",
      "|[0.8088689210508265,0.19113107894917347]|\n",
      "|[0.9200359013963973,0.07996409860360267]|\n",
      "|[0.9200359013963973,0.07996409860360267]|\n",
      "|[0.9200359013963973,0.07996409860360267]|\n",
      "+----------------------------------------+\n",
      "only showing top 5 rows\n",
      "\n",
      "probability right column is rainday probability for each record\n"
     ]
    }
   ],
   "source": [
    "#get the accuracy of classification model,such as:\n",
    "#DecisionTreeClassifier,RandomForestClassifier,LogisticRegression,GBTClassifier\n",
    "# ceate a list for saving the accuracy \n",
    "saveAccuracy=[]\n",
    "#create the evaluator\n",
    "evaluator = MulticlassClassificationEvaluator(\\\n",
    "\n",
    "labelCol=\"label\", predictionCol=\"prediction\",\\\n",
    "\n",
    "metricName=\"accuracy\")\n",
    "model=[DecisionTreeClassifier,RandomForestClassifier,LogisticRegression,GBTClassifier]\n",
    "#DecisionTreeClassifier\n",
    "classficationModel = DecisionTreeClassifier()\n",
    "modelDt = classficationModel.fit(train)\n",
    "predictionsDt = modelDt.transform(test)\n",
    "accuracy = evaluator.evaluate(predictionsDt)\n",
    "saveAccuracy.append(accuracy)\n",
    "\n",
    "print(\"DecisionTreeClassifier accuracy is \"+str(accuracy))\n",
    "print(\"DecisionTreeClassifier Test Error = %g \" % (1.0 - accuracy))\n",
    "predictionsDt.select(\"probability\").show(5,False)\n",
    "print(\"probability right column is rainday probability for each record\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rain day probability is 1 no-rain day probability is 0\n",
      "RandomForestClassifier accuracy is 0.8345001532187728\n",
      "RandomForestClassifier Test Error = 0.1655 \n",
      "+----------------------------------------+\n",
      "|probability                             |\n",
      "+----------------------------------------+\n",
      "|[0.8891218876640495,0.11087811233595053]|\n",
      "|[0.861477510615168,0.13852248938483205] |\n",
      "|[0.8891218876640495,0.11087811233595053]|\n",
      "|[0.6979153463018017,0.30208465369819826]|\n",
      "|[0.8659449609568501,0.13405503904314997]|\n",
      "+----------------------------------------+\n",
      "only showing top 5 rows\n",
      "\n",
      "probability right column is rainday probability for each record\n"
     ]
    }
   ],
   "source": [
    "#RandomForestClassifier\n",
    "classficationModel = RandomForestClassifier()\n",
    "modelRf = classficationModel.fit(train)\n",
    "predictionsRF = modelRf.transform(test)\n",
    "accuracy = evaluator.evaluate(predictionsRF)\n",
    "saveAccuracy.append(accuracy)\n",
    "print(\"rain day probability is 1 no-rain day probability is 0\")\n",
    "print(\"RandomForestClassifier accuracy is \"+str(accuracy))\n",
    "print(\"RandomForestClassifier Test Error = %g \" % (1.0 - accuracy))\n",
    "predictionsRF.select(\"probability\").show(5,False)\n",
    "print(\"probability right column is rainday probability for each record\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rain day probability is 1 no-rain day probability is 0\n",
      "LogisticRegression accuracy is 0.8380595431723358\n",
      "LogisticRegression Test Error = 0.16194 \n",
      "+-----------------------------------------+\n",
      "|probability                              |\n",
      "+-----------------------------------------+\n",
      "|[0.9832964439344998,0.016703556065500207]|\n",
      "|[0.9328128911577359,0.06718710884226405] |\n",
      "|[0.969495302483726,0.030504697516273924] |\n",
      "|[0.856691606238049,0.1433083937619511]   |\n",
      "|[0.9113902798231467,0.0886097201768533]  |\n",
      "+-----------------------------------------+\n",
      "only showing top 5 rows\n",
      "\n",
      "probability right column is rainday probability for each record\n"
     ]
    }
   ],
   "source": [
    "#LogisticRegression\n",
    "classficationModel = LogisticRegression()\n",
    "modelLr = classficationModel.fit(train)\n",
    "predictionsLr = modelLr.transform(test)\n",
    "accuracy = evaluator.evaluate(predictionsLr)\n",
    "saveAccuracy.append(accuracy)\n",
    "print(\"rain day probability is 1 no-rain day probability is 0\")\n",
    "print(\"LogisticRegression accuracy is \"+str(accuracy))\n",
    "print(\"LogisticRegression Test Error = %g \" % (1.0 - accuracy))\n",
    "predictionsLr.select(\"probability\").show(5,False)\n",
    "print(\"probability right column is rainday probability for each record\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rain day probability is 1 no-rain day probability is 0\n",
      "GBTClassifier accuracy is 0.8431746929731514\n",
      "GBTClassifier Test Error = 0.156825 \n",
      "+-----------------------------------------+\n",
      "|probability                              |\n",
      "+-----------------------------------------+\n",
      "|[0.9445762723956882,0.0554237276043118]  |\n",
      "|[0.9213847065276578,0.0786152934723422]  |\n",
      "|[0.9437312511394386,0.056268748860561435]|\n",
      "|[0.5760119889089628,0.42398801109103723] |\n",
      "|[0.920731856297735,0.07926814370226498]  |\n",
      "+-----------------------------------------+\n",
      "only showing top 5 rows\n",
      "\n",
      "probability right column is rainday probability for each record\n"
     ]
    }
   ],
   "source": [
    "#GBTClassifier\n",
    "classficationModel = GBTClassifier()\n",
    "modelGb = classficationModel.fit(train)\n",
    "predictionsGb = modelGb.transform(test)\n",
    "accuracy = evaluator.evaluate(predictionsGb)\n",
    "saveAccuracy.append(accuracy)\n",
    "\n",
    "print(\"rain day probability is 1 no-rain day probability is 0\")\n",
    "print(\"GBTClassifier accuracy is \"+str(accuracy))\n",
    "print(\"GBTClassifier Test Error = %g \" % (1.0 - accuracy))\n",
    "predictionsGb.select(\"probability\").show(5,False)\n",
    "print(\"probability right column is rainday probability for each record\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3], <a list of 4 Text xticklabel objects>)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the accuracy in a bar chart \n",
    "import matplotlib.pylab as plt\n",
    "modelName=[\"DecisionTreeClassifier\",\"RandomForestClassifier\",\"LogisticRegression\",\"GBTClassifier\"]\n",
    "plt.bar(modelName,saveAccuracy)\n",
    "# set the range of Y for clearly display the accuracy\n",
    "plt.ylim(0.833,0.845)\n",
    "plt.xticks(rotation=45)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from this bar chart, i find that GBTClassifier has highest the accuracy in these Classifier model. The logistic Regression has the second highest accuracy.As for the Decision Tree and RandomForest, that have similar accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### step 09: Calculate the confusion matrix and find the preceision, recall, and F1 score of each classification algorithm. Explain how the accuracy of the predication can be improved?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the confusion matrix should like this #[TN,FP]\n",
    "                             #[FN,TP]\n",
    "                             the postiove is 1 \n",
    "                             the negative is 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "so I would use the formula  Precision = TP/(TP+FP) Precision means that measures the % of the correct classification from the predicted.\n",
    "Recall= TP/(TP+FN)  recall means that measures the % of the corret classification from the overall\n",
    "      F1=2*(Precision * Recall)/(precision +Recall) F1 means that this model is stable or not. if recall is a high rate, the F1 will be a high number.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluatorCalculate (matrix):\n",
    "    TP=matrix[1,1]\n",
    "    FP=matrix[0,1]\n",
    "    FN=matrix[1,0]\n",
    "    TN=matrix[0,0]\n",
    "    precision=TP/(TP+FP)\n",
    "    Recall= TP/(TP+FN)\n",
    "    F1=2*(precision * Recall)/(precision +Recall)\n",
    "    return precision,Recall,F1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DenseMatrix([[31799.,  1100.],\n",
      "             [ 5897.,  3627.]])\n",
      "Decision Tree Model\n",
      "precision0.767294266976941\n",
      "Recall0.38082738345233097\n",
      "F1  0.5090169110939584\n"
     ]
    }
   ],
   "source": [
    "from pyspark.mllib.evaluation import MulticlassMetrics\n",
    "\n",
    "#Decision Tree Model\n",
    "confusMDr=predictionsDt.select(\"prediction\",\"label\").rdd\n",
    "drMetrics=MulticlassMetrics(confusMDr)\n",
    "drCm=drMetrics.confusionMatrix()\n",
    "print(drCm)\n",
    "precision,Recall,F1=evaluatorCalculate(drCm)\n",
    "print(\"Decision Tree Model\")\n",
    "print(\"precision\"+str(precision))\n",
    "print(\"Recall\"+str(Recall))\n",
    "print(\"F1  \"+str(F1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DenseMatrix([[32009.,   890.],\n",
      "             [ 6131.,  3393.]])\n",
      "Random Forest Model\n",
      "precision0.7922017277609152\n",
      "Recall0.35625787484250315\n",
      "F1 0.4914898240023176\n"
     ]
    }
   ],
   "source": [
    "#Random Forest Model\n",
    "\n",
    "confusMRF=predictionsRF.select(\"prediction\",\"label\").rdd\n",
    "rfMetrics=MulticlassMetrics(confusMRF)\n",
    "rfCm=rfMetrics.confusionMatrix()\n",
    "print(rfCm)\n",
    "precision,Recall,F1=evaluatorCalculate(rfCm)\n",
    "print(\"Random Forest Model\")\n",
    "print(\"precision\"+str(precision))\n",
    "print(\"Recall\"+str(Recall))\n",
    "print(\"F1 \"+str(F1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DenseMatrix([[32009.,   890.],\n",
      "             [ 6131.,  3393.]])\n",
      "Logistic Regression Model\n",
      "precision0.7183352449614944\n",
      "Recall0.4603107937841243\n",
      "F1 0.5610801817367376\n"
     ]
    }
   ],
   "source": [
    "# Logistic Regression Model\n",
    "confusMLR=predictionsLr.select(\"prediction\",\"label\").rdd\n",
    "lrMetrics=MulticlassMetrics(confusMLR)\n",
    "lrCm=lrMetrics.confusionMatrix()\n",
    "print(rfCm)\n",
    "precision,Recall,F1=evaluatorCalculate(lrCm)\n",
    "print(\"Logistic Regression Model\")\n",
    "print(\"precision\"+str(precision))\n",
    "print(\"Recall\"+str(Recall))\n",
    "print(\"F1 \"+str(F1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DenseMatrix([[32009.,   890.],\n",
      "             [ 6131.,  3393.]])\n",
      "GBTClassifier Model\n",
      "precision0.7361408126336568\n",
      "Recall0.46986560268794625\n",
      "F1 0.5736076395564956\n"
     ]
    }
   ],
   "source": [
    "# #GBTClassifier Model\n",
    "confusMGB=predictionsGb.select(\"prediction\",\"label\").rdd\n",
    "gbMetrics=MulticlassMetrics(confusMGB)\n",
    "gbCm=gbMetrics.confusionMatrix()\n",
    "print(rfCm)\n",
    "precision,Recall,F1=evaluatorCalculate(gbCm)\n",
    "print(\"GBTClassifier Model\")\n",
    "print(\"precision\"+str(precision))\n",
    "print(\"Recall\"+str(Recall))\n",
    "print(\"F1 \"+str(F1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "According to these results, I find that these model hardly predict that tomorrow is a rain day. it is beacause that the recall is so low. In other words, the FN is too much, the model cannot give a good prediction. \n",
    "Prehaps, there are some reasons. like underfitting, lake of dataset and unsuitable parameter. \n",
    "So, we can use the CrossValidation to find the suitable parameter. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In my opion, adding  the dataset is a good way. The next i would explain this way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import dataset\n",
    "rain_dataset_improv=spark.read.csv(\"weatherAUS.csv\",header =True,inferSchema =True,nullValue=\"NA\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Date: timestamp (nullable = true)\n",
      " |-- Location: string (nullable = true)\n",
      " |-- MinTemp: double (nullable = true)\n",
      " |-- MaxTemp: double (nullable = true)\n",
      " |-- Rainfall: double (nullable = true)\n",
      " |-- Evaporation: double (nullable = true)\n",
      " |-- Sunshine: double (nullable = true)\n",
      " |-- WindGustDir: string (nullable = true)\n",
      " |-- WindGustSpeed: integer (nullable = true)\n",
      " |-- WindDir9am: string (nullable = true)\n",
      " |-- WindDir3pm: string (nullable = true)\n",
      " |-- WindSpeed9am: integer (nullable = true)\n",
      " |-- WindSpeed3pm: integer (nullable = true)\n",
      " |-- Humidity9am: integer (nullable = true)\n",
      " |-- Humidity3pm: integer (nullable = true)\n",
      " |-- Pressure9am: double (nullable = true)\n",
      " |-- Pressure3pm: double (nullable = true)\n",
      " |-- Cloud9am: integer (nullable = true)\n",
      " |-- Cloud3pm: integer (nullable = true)\n",
      " |-- Temp9am: double (nullable = true)\n",
      " |-- Temp3pm: double (nullable = true)\n",
      " |-- RainToday: string (nullable = true)\n",
      " |-- RainTomorrow: string (nullable = true)\n",
      "\n",
      "Date have 0 missing value \n",
      "Location have 0 missing value \n",
      "MinTemp have 637 missing value \n",
      "MaxTemp have 322 missing value \n",
      "Rainfall have 1406 missing value \n",
      "Evaporation have 60843 missing value \n",
      "Sunshine have 67816 missing value \n",
      "WindGustDir have 9330 missing value \n",
      "WindGustSpeed have 9270 missing value \n",
      "WindDir9am have 10013 missing value \n",
      "WindDir3pm have 3778 missing value \n",
      "WindSpeed9am have 1348 missing value \n",
      "WindSpeed3pm have 2630 missing value \n",
      "Humidity9am have 1774 missing value \n",
      "Humidity3pm have 3610 missing value \n",
      "Pressure9am have 14014 missing value \n",
      "Pressure3pm have 13981 missing value \n",
      "Cloud9am have 53657 missing value \n",
      "Cloud3pm have 57094 missing value \n",
      "Temp9am have 904 missing value \n",
      "Temp3pm have 2726 missing value \n",
      "RainToday have 1406 missing value \n",
      "RainTomorrow have 0 missing value \n"
     ]
    }
   ],
   "source": [
    "columnName=rain_dataset_improv.columns\n",
    "rain_dataset_improv.printSchema()\n",
    "\n",
    "for i in columnName:\n",
    "    counts=rain_dataset_improv.select(isnull(i).alias(\"jude\")).filter(col(\"jude\")== True).count()\n",
    "    print(str(i)+\" have \"+str(counts)+\" missing value \")\n",
    "    #[Evaporation,Sunshine]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we can see some columns lack of data over the 10,000 , so  i would delete these columns like Sunshine,Evaporation,WindDir9am,Pressure9am,Pressure3pm,Cloud9am,Cloud3pm.\n",
    "In addition, i would fill the value for missing value based on location and date. RainTorrow still is label."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
